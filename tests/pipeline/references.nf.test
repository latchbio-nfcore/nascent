def igenomes_base = 's3://ngi-igenomes/igenomes'

nextflow_pipeline {

    name "Test passing references"
    script "main.nf"

    test("Should work with BWA Index") {
        // https://github.com/nf-core/nascent/issues/106
        when {
            params {
                outdir = "$outputDir"
                aligner = "bwa"
                bwa_index = "${igenomes_base}/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/BWAIndex/version0.6.0/"
                fasta = "${igenomes_base}/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/WholeGenomeFasta/genome.fa"
                gtf = "${igenomes_base}/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Annotation/Genes/genes.gtf"
            }
        }

        then {
            assert workflow.success
            assert snapshot(
                workflow.trace.tasks().size(),
                path("$outputDir/bbmap").list(),
                path("$outputDir/bed2saf").list(),
                // BUG https://github.com/nf-core/nascent/issues/102
                // path("$outputDir/bedtools").list(),
                // FIXME gtf2bed isn't deterministic
                // path("$outputDir/bwa/featurecounts/gene").list(),
                // FIXME cd4 isn't deterministic
                // path("$outputDir/bwa/featurecounts/predicted").list(),
                // path("$outputDir/deeptools").list(),
                // path("$outputDir/fastp/*.json").list(),
                // FIXME gtf2bed isn't deterministic
                // path("$outputDir/gtf2bed").list(),
                path("$outputDir/homer/cd4.bed"),
                path("$outputDir/homer/jurkat.bed"),
                path("$outputDir/preseq").list(),
                // path("$outputDir/rseqc").list(),
                path("$outputDir/samtools").list(),
            ).match()
        }

    }

}

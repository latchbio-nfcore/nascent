nextflow_process {
    name "Test Process DREG_PREP"
    script "../main.nf"
    process "DREG_PREP"
    // config "./nextflow.config"

    tag "modules"
    tag "dreg"

    test("sarscov2 - paired-end") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end: false ], // meta map
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                // sizes
                input[1] = file('https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/sarscov2/genome/genome.sizes', checkIfExists: true)
                // extension
                input[2] = 'R1_5'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("paired-end") }
            )
        }

    }

    test("sarscov2 - single-end") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end: true ], // meta map
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true),
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai', checkIfExists: true)
                ])
                // sizes
                input[1] = file('https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/sarscov2/genome/genome.sizes', checkIfExists: true)
                // extension
                input[2] = 'GROseq'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("single-end") }
            )
        }

    }
}

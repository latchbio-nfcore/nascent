#!/usr/bin/bash
#
#########################################
# Author: [shaopei](https://github.com/shaopei)
# File: proseq2.0.bsh
# Source: https://github.com/Danko-Lab/proseq2.0/blob/master/proseq2.0.bsh
# Source+commit: https://github.com/Danko-Lab/proseq2.0/blob/e306ae4722639cf44b0074cbdf1285e53a0ae9e7/proseq2.0.bsh
# Download Date: 2024-03-28, commit: f07ade2
# This source code is licensed under the BSD 2-Clause license
#########################################

#############################################
## Write out the bigWigs.
echo "SE"
echo "Writing bigWigs:"
j=$(echo $bam_file | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3- | rev)
echo $j >${j}.align.log

# in SE, MAP5 alwasys TRUE

#if [[ "${RNA5}" == "R1_5prime" && "${OPP}" == "FALSE" ]] ; then ## report The 5 prime end of the RNA.   #like GRO-seq
if [[ "$SE_OUTPUT" == "G" ]]; then
    bedtools bamtobed -i $bam_file 2>kill.warnings | awk 'BEGIN{OFS="\t"} ($5 > 0){print $0}' |
        awk 'BEGIN{OFS="\t"} ($6 == "+") {print $1,$2,$2+1,$4,$5,$6}; ($6 == "-") {print $1,$3-1,$3,$4,$5,$6}' | gzip >$j.bed.gz
    #elif [[ "${RNA3}" == "R1_5prime" && "${OPP}" == "TRUE" ]] ; then  #like PRO-seq
elif [[ "$SE_OUTPUT" == "P" ]]; then
    bedtools bamtobed -i $bam_file 2>kill.warnings | awk 'BEGIN{OFS="\t"} ($5 > 0){print $0}' |
        awk 'BEGIN{OFS="\t"} ($6 == "+") {print $1,$2,$2+1,$4,$5,"-"}; ($6 == "-") {print $1,$3-1,$3,$4,$5,"+"}' | gzip >$j.bed.gz
fi

echo 'Number of mappable reads:' >>${j}.align.log
readCount=$(zcat $j.bed.gz | grep "" -c)
echo ${readCount} >>${j}.align.log

## Remove rRNA and reverse the strand (PRO-seq).
zcat $j.bed.gz | grep "rRNA\|chrM" -v | grep "_" -v | sort-bed - | gzip >$j.nr.rs.bed.gz
echo 'Number of mappable reads (excluding rRNA):' >>${j}.align.log
echo $(zcat $j.nr.rs.bed.gz | grep "" -c) >>${j}.align.log

## Convert to bedGraph ... Cannot gzip these, unfortunately.
bedtools genomecov -bg -i $j.nr.rs.bed.gz -g ${sizes} -strand + >$j\_plus.bedGraph
bedtools genomecov -bg -i $j.nr.rs.bed.gz -g ${sizes} -strand - >$j\_minus.noinv.bedGraph

## Invert minus strand.
cat $j\_minus.noinv.bedGraph | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,-1*$4}' >$j\_minus.bedGraph ## Invert read counts on the minus strand.

## normalized by RPM
cat $j\_plus.bedGraph | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,$4*1000*1000/'$readCount'/1}' >$j\_plus.rpm.bedGraph
cat $j\_minus.bedGraph | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,$4*1000*1000/'$readCount'/1}' >$j\_minus.rpm.bedGraph
## Then to bigWig (nomalized and non-nomrmalized ones)
bedGraphToBigWig $j\_plus.rpm.bedGraph ${sizes} $j\_plus.rpm.bw
bedGraphToBigWig $j\_minus.rpm.bedGraph ${sizes} $j\_minus.rpm.bw
bedGraphToBigWig $j\_plus.bedGraph ${sizes} $j\_plus.bw
bedGraphToBigWig $j\_minus.bedGraph ${sizes} $j\_minus.bw

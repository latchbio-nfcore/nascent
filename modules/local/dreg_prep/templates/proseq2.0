#!/usr/bin/bash
#
#########################################
# Author: [shaopei](https://github.com/shaopei)
# File: proseq2.0.bsh
# Source: https://github.com/Danko-Lab/proseq2.0/blob/master/proseq2.0.bsh
# Source+commit: https://github.com/Danko-Lab/proseq2.0/blob/e306ae4722639cf44b0074cbdf1285e53a0ae9e7/proseq2.0.bsh
# Download Date: 2024-03-28, commit: f07ade2
# This source code is licensed under the BSD 2-Clause license
#########################################

#############################################
## Write out the bigWigs.
echo "Writing bigWigs:"

# in SE, MAP5 alwasys TRUE

#if [[ "\${RNA5}" == "R1_5prime" && "\${OPP}" == "FALSE" ]] ; then ## report The 5 prime end of the RNA.   #like GRO-seq
if [[ "$meta.single_end" == "true" ]]; then
    echo "SE"
    if [[ "$assay_type" == "GROseq" ]]; then
        bedtools bamtobed -i $bam_file | awk -f ${moduleDir}/scripts/se_1.awk | gzip >${prefix}.bed.gz
        #elif [[ "\${RNA3}" == "R1_5prime" && "\${OPP}" == "TRUE" ]] ; then  #like PRO-seq
    elif [[ "$assay_type" == "PROseq" ]]; then
        bedtools bamtobed -i $bam_file | awk -f ${moduleDir}/scripts/se_2.awk | gzip >${prefix}.bed.gz
    fi
else
    echo "PE"
    if [ "$assay_type" == "R1_5" ]; then
        # HACK Opposite-strand not supported for now
        if true; then
            # HACK Map5 not supported for now
            if true; then ## report The 5' end of the RNA. Danko lab leChRO-Seq protocol is on the 5' of _R1 readl, same strand of R1 (\$9)
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_1.awk | gzip >${prefix}.bed.gz
            else ## report The 3' end of the RNA.  Danko lab leChRO-Seq protocol is on the 5 prime of _R2 read, opposite strand of R2 (R2 strand \$10, R1 strand \$9)
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_2.awk | gzip >${prefix}.bed.gz
            fi
        # HACK Opposite-strand not supported for now
        elif false; then
            # HACK Map5 not supported for now
            if true; then ## report The 5' end of the RNA.
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_4.awk | gzip >${prefix}.bed.gz
            else ## report The 3' end of the RNA.
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_5.awk | gzip >${prefix}.bed.gz
            fi
        fi
    elif [ "$assay_type" == "R2_5" ]; then
        # HACK Opposite-strand not supported for now
        if true; then
            # HACK Map5 not supported for now
            if true; then #report the 5 prime end of RNA, in Engreitz data is 5 prime end of R2, same strand
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_6.awk | gzip >${prefix}.bed.gz
            else ## report the 3-prime end of the RNA, in Engreitz data is the 5' end of R1 read, but opposite strand
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_7.awk | gzip >${prefix}.bed.gz
            fi
        # HACK Opposite-strand not supported for now
        elif false; then
            # HACK Map5 not supported for now
            if true; then #report the 5 prime end of RNA, in Engreitz data is 5 prime end of R2, same strand
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_8.awk | gzip >${prefix}.bed.gz
            else ## report the 3-prime end of the RNA, in Engreitz data is the 5' end of R1 read, but opposite strand
                bedtools bamtobed -bedpe -mate1 -i $bam_file | awk -f ${moduleDir}/scripts/pe_8.awk | gzip >${prefix}.bed.gz
            fi
        fi
    fi
fi

echo 'Number of mappable reads:'
readCount=`zcat ${prefix}.bed.gz | wc -l`
echo \${readCount}

## Remove rRNA and reverse the strand (PRO-seq).
zcat ${prefix}.bed.gz | grep "rRNA\\|chrM" -v | grep "_" -v | sort -k 1,1 -k2,2n - | gzip >${prefix}.nr.rs.bed.gz
echo 'Number of mappable reads (excluding rRNA):'
echo `zcat ${prefix}.nr.rs.bed.gz | wc -l`

## Convert to bedGraph ... Cannot gzip these, unfortunately.
bedtools genomecov -bg -i ${prefix}.nr.rs.bed.gz -g ${sizes} -strand + >${prefix}_plus.bedGraph
bedtools genomecov -bg -i ${prefix}.nr.rs.bed.gz -g ${sizes} -strand - >${prefix}_minus.noinv.bedGraph

## Invert minus strand.
cat ${prefix}_minus.noinv.bedGraph | awk -f ${moduleDir}/scripts/se_3.awk >${prefix}_minus.bedGraph ## Invert read counts on the minus strand.

## normalized by RPM
cat ${prefix}_plus.bedGraph | awk -f ${moduleDir}/scripts/se_4.awk -v readCount="\$readCount" >${prefix}_plus.rpm.bedGraph
cat ${prefix}_minus.bedGraph | awk -f ${moduleDir}/scripts/se_4.awk -v readCount="\$readCount" >${prefix}_minus.rpm.bedGraph
## Then to bigWig (nomalized and non-nomrmalized ones)
bedGraphToBigWig ${prefix}_plus.rpm.bedGraph ${sizes} ${prefix}_plus.rpm.bw
bedGraphToBigWig ${prefix}_minus.rpm.bedGraph ${sizes} ${prefix}_minus.rpm.bw
bedGraphToBigWig ${prefix}_plus.bedGraph ${sizes} ${prefix}_plus.bw
bedGraphToBigWig ${prefix}_minus.bedGraph ${sizes} ${prefix}_minus.bw
